{"/home/travis/build/npmtest/node-npmtest-node-base64-image/test.js":"/* istanbul instrument in package npmtest_node_base64_image */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-base64-image/lib.npmtest_node_base64_image.js":"/* istanbul instrument in package npmtest_node_base64_image */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_base64_image = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_base64_image = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-base64-image/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-base64-image && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_base64_image */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_base64_image\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_base64_image.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_base64_image.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_base64_image.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_base64_image.__dirname + '/lib.npmtest_node_base64_image.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-base64-image/node_modules/node-base64-image/dist/node-base64-image.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encode = encode;\nexports.decode = decode;\n\nvar _request = require('request');\n\nvar _request2 = _interopRequireDefault(_request);\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _fs = require('fs');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *  Encodes a remote or local image to Base64 encoded string or Buffer\n *\n *  @name encode\n *  @param {string} url - URL of remote image or local path to image\n *  @param {Object} [options={}] - Options object for extra configuration\n *  @param {boolean} options.string - Returns a Base64 encoded string. Defaults to Buffer object\n *  @param {boolean} options.local - Encode a local image file instead of a remote image\n *  @param {fnCallback} callback - Callback function\n *  @todo Option to wrap string every 76 characters for strings larger than 76 characters\n *  @return {fnCallback} - Returns the callback\n */\n\n\n/**\n * Callback for encode/decode functions\n *\n * @callback fnCallback\n * @param {Object} Error object\n * @param {(string|Object)} Response string or Buffer object\n */\nfunction encode(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { string: false, local: false };\n  var callback = arguments[2];\n  // eslint-disable-line\n  if (_lodash2.default.isUndefined(url) || _lodash2.default.isNull(url) || !_lodash2.default.isString(url)) {\n    return callback(new Error('URL is undefined or not properly formatted'));\n  }\n\n  if (options.local) {\n    (0, _fs.readFile)(url, function (err, body) {\n      if (err) {\n        return callback(err);\n      }\n\n      /**\n       * @todo Handle this better.\n       */\n      var result = options.string ? body.toString('base64') : new Buffer(body, 'base64');\n      return callback(null, result);\n    });\n  } else {\n    (0, _request2.default)({ url: url, encoding: null }, function (err, response, body) {\n      if (err) {\n        return callback(err);\n      }\n\n      if (!body) {\n        return callback(new Error('Error retrieving image - Empty Body!'));\n      }\n\n      if (body && response.statusCode === 200) {\n        /**\n         * @todo Handle this better.\n         */\n        var result = options.string ? body.toString('base64') : new Buffer(body, 'base64');\n        return callback(null, result);\n      }\n\n      return callback(new Error('Error retrieving image - Status Code ' + response.statusCode));\n    });\n  }\n}\n\n/**\n *  Decodes an base64 encoded image buffer and saves it to disk\n *\n *  @name decode\n *  @param {Buffer} imageBuffer - Image Buffer object\n *  @param {Object} [options={}] - Options object for extra configuration\n *  @param {string} options.filename - Filename for the final image file\n *  @param {fnCallback} callback - Callback function\n *  @return {fnCallback} - Returns the callback\n */\n\nfunction decode(imageBuffer) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { filename: 'saved-image' };\n  var callback = arguments[2];\n  // eslint-disable-line\n  if (!_lodash2.default.isBuffer(imageBuffer)) {\n    return callback(new Error('The image is not a Buffer object type'));\n  }\n\n  (0, _fs.writeFile)(options.filename + '.jpg', imageBuffer, 'base64', function (err) {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null, 'Image saved successfully to disk!');\n  });\n}\n\nvar base64 = {\n  encode: encode,\n  decode: decode\n};\n\nexports.default = base64;","/home/travis/build/npmtest/node-npmtest-node-base64-image/node_modules/node-base64-image/gulpfile.babel.js":"import gulp from 'gulp';\nimport loadPlugins from 'gulp-load-plugins';\nimport {execFile} from 'child_process';\nimport flow from 'flow-bin';\nimport {Instrumenter} from 'isparta';\n\nimport mochaGlobals from './test/setup/.globals';\n\n// Load all of our Gulp plugins\nconst $ = loadPlugins();\n\nfunction onError() {\n  $.util.beep();\n}\n\n// Lint a set of files\nfunction lint(files) {\n  return gulp.src(files)\n    .pipe($.plumber())\n    .pipe($.eslint())\n    .pipe($.eslint.format())\n    .pipe($.eslint.failOnError())\n    .on('error', onError);\n}\n\nfunction lintSrc() {\n  return lint('src/**/*.js');\n}\n\nfunction lintTest() {\n  return lint('test/**/*.js');\n}\n\nfunction lintGulpfile() {\n  return lint('gulpfile.babel.js');\n}\n\nfunction _mocha() {\n  return gulp.src(['test/setup/node.js', 'test/unit/**/*.js'], {read: false})\n    .pipe($.mocha({\n      reporter: 'spec',\n      globals: Object.keys(mochaGlobals.globals),\n      ignoreLeaks: false,\n      timeout: 10000\n    }));\n}\n\n// Thank you @hallettj for this\nfunction _runFlow(cmd, callback) {\n  execFile(flow, cmd, {\n    cwd: module.__dirname\n  }, function (err, stdout, stderr) {\n    if (err && stdout.length > 0) {\n      return callback(new $.util.PluginError('flow', stdout));\n    } else if (err) {\n      $.util.log(stderr);\n      return callback(err);\n    } else { // eslint-disable-line\n      callback();\n    }\n  });\n}\n\nfunction _registerBabel() {\n  require('babel-register');\n}\n\nfunction test() {\n  _registerBabel();\n  return _mocha();\n}\n\nfunction coverage(done) {\n  _registerBabel();\n  gulp.src(['src/**/*.js'])\n    .pipe($.istanbul({ instrumenter: Instrumenter }))\n    .pipe($.istanbul.hookRequire())\n    .on('finish', () => {\n      return test()\n        .pipe($.istanbul.writeReports())\n        .on('end', done);\n    });\n}\n\nfunction typeCheck(done) {\n  _registerBabel();\n  _runFlow(['start'], function () {\n    _runFlow(['status', '--no-auto-start'], done);\n  });\n}\n\nfunction gitTag() {\n  _registerBabel();\n  return gulp.src(['./package.json'])\n    .pipe($.tagVersion());\n}\n\nfunction generateDocs() {\n  _registerBabel();\n  return gulp.src('src/node-base64-image.js')\n    .pipe($.documentation({ format: 'md', filename: 'docs.md' }))\n    .pipe(gulp.dest('docs'));\n}\n\n// Lint our source code\ngulp.task('lint-src', lintSrc);\n\n// Lint our test code\ngulp.task('lint-test', lintTest);\n\n// Lint this file\ngulp.task('lint-gulpfile', lintGulpfile);\n\n// Lint everything\ngulp.task('lint', ['lint-src', 'lint-test', 'lint-gulpfile']);\n\n// Lint and run our tests\ngulp.task('test', ['lint', 'flow'], test);\n\n// Set up coverage and run tests\ngulp.task('coverage', ['lint'], coverage);\n\n// Set up type checking using flow\ngulp.task('flow', typeCheck);\n\n// Tag with version in package.json\ngulp.task('tag', gitTag);\n\n// Generate documentation\ngulp.task('doc', generateDocs);\n\n// An alias of test\ngulp.task('default', ['test']);\n","/home/travis/build/npmtest/node-npmtest-node-base64-image/node_modules/node-base64-image/src/node-base64-image.js":"/* @flow */\nimport request from 'request';\nimport _ from 'lodash';\nimport {readFile as read, writeFile as write} from 'fs';\n\n/**\n * Callback for encode/decode functions\n *\n * @callback fnCallback\n * @param {Object} Error object\n * @param {(string|Object)} Response string or Buffer object\n */\ntype Callback<T> = (err: ?Error, x?: T) => void;\n\n/**\n *  Encodes a remote or local image to Base64 encoded string or Buffer\n *\n *  @name encode\n *  @param {string} url - URL of remote image or local path to image\n *  @param {Object} [options={}] - Options object for extra configuration\n *  @param {boolean} options.string - Returns a Base64 encoded string. Defaults to Buffer object\n *  @param {boolean} options.local - Encode a local image file instead of a remote image\n *  @param {fnCallback} callback - Callback function\n *  @todo Option to wrap string every 76 characters for strings larger than 76 characters\n *  @return {fnCallback} - Returns the callback\n */\nexport function encode(url: string, options: Object = {string: false, local: false}, callback: Callback<mixed>) { // eslint-disable-line\n  if (_.isUndefined(url) || _.isNull(url) || !_.isString(url)) {\n    return callback(new Error('URL is undefined or not properly formatted'));\n  }\n\n  if (options.local) {\n    read(url, (err, body) => {\n      if (err) {\n        return callback(err);\n      }\n\n      /**\n       * @todo Handle this better.\n       */\n      let result = options.string ? body.toString('base64') : new Buffer(body, 'base64');\n      return callback(null, result);\n    });\n  } else {\n    request({ url: url, encoding: null }, (err, response, body) => {\n      if (err) {\n        return callback(err);\n      }\n\n      if (!body) {\n        return callback(new Error('Error retrieving image - Empty Body!'));\n      }\n\n      if (body && response.statusCode === 200) {\n        /**\n         * @todo Handle this better.\n         */\n        let result = options.string ? body.toString('base64') : new Buffer(body, 'base64');\n        return callback(null, result);\n      }\n\n      return callback(new Error('Error retrieving image - Status Code ' + response.statusCode));\n    });\n  }\n}\n\n/**\n *  Decodes an base64 encoded image buffer and saves it to disk\n *\n *  @name decode\n *  @param {Buffer} imageBuffer - Image Buffer object\n *  @param {Object} [options={}] - Options object for extra configuration\n *  @param {string} options.filename - Filename for the final image file\n *  @param {fnCallback} callback - Callback function\n *  @return {fnCallback} - Returns the callback\n */\nexport function decode(imageBuffer: any, options: Object = {filename: 'saved-image'}, callback: Callback<mixed>) { // eslint-disable-line\n  if (!_.isBuffer(imageBuffer)) {\n    return callback(new Error('The image is not a Buffer object type'));\n  }\n\n  write(options.filename + '.jpg', imageBuffer, 'base64', (err) => {\n    if (err) {\n      return callback(err);\n    }\n\n    return callback(null, 'Image saved successfully to disk!');\n  });\n}\n\nconst base64 = {\n  encode: encode,\n  decode: decode\n};\n\nexport default base64;\n"}